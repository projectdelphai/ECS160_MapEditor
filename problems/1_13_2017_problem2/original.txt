
tftpserver:     file format elf64-x86-64


Disassembly of section .init:

0000000000400fb8 <_init>:
  400fb8:	48 83 ec 08          	sub    $0x8,%rsp
  400fbc:	48 8b 05 35 20 20 00 	mov    0x202035(%rip),%rax        # 602ff8 <_DYNAMIC+0x200>
  400fc3:	48 85 c0             	test   %rax,%rax
  400fc6:	74 05                	je     400fcd <_init+0x15>
  400fc8:	e8 53 02 00 00       	callq  401220 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc@plt+0x10>
  400fcd:	48 83 c4 08          	add    $0x8,%rsp
  400fd1:	c3                   	retq   

Disassembly of section .plt:

0000000000400fe0 <chdir@plt-0x10>:
  400fe0:	ff 35 22 20 20 00    	pushq  0x202022(%rip)        # 603008 <_GLOBAL_OFFSET_TABLE_+0x8>
  400fe6:	ff 25 24 20 20 00    	jmpq   *0x202024(%rip)        # 603010 <_GLOBAL_OFFSET_TABLE_+0x10>
  400fec:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000400ff0 <chdir@plt>:
  400ff0:	ff 25 22 20 20 00    	jmpq   *0x202022(%rip)        # 603018 <_GLOBAL_OFFSET_TABLE_+0x18>
  400ff6:	68 00 00 00 00       	pushq  $0x0
  400ffb:	e9 e0 ff ff ff       	jmpq   400fe0 <_init+0x28>

0000000000401000 <printf@plt>:
  401000:	ff 25 1a 20 20 00    	jmpq   *0x20201a(%rip)        # 603020 <_GLOBAL_OFFSET_TABLE_+0x20>
  401006:	68 01 00 00 00       	pushq  $0x1
  40100b:	e9 d0 ff ff ff       	jmpq   400fe0 <_init+0x28>

0000000000401010 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEmm@plt>:
  401010:	ff 25 12 20 20 00    	jmpq   *0x202012(%rip)        # 603028 <_GLOBAL_OFFSET_TABLE_+0x28>
  401016:	68 02 00 00 00       	pushq  $0x2
  40101b:	e9 c0 ff ff ff       	jmpq   400fe0 <_init+0x28>

0000000000401020 <close@plt>:
  401020:	ff 25 0a 20 20 00    	jmpq   *0x20200a(%rip)        # 603030 <_GLOBAL_OFFSET_TABLE_+0x30>
  401026:	68 03 00 00 00       	pushq  $0x3
  40102b:	e9 b0 ff ff ff       	jmpq   400fe0 <_init+0x28>

0000000000401030 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_@plt>:
  401030:	ff 25 02 20 20 00    	jmpq   *0x202002(%rip)        # 603038 <_GLOBAL_OFFSET_TABLE_+0x38>
  401036:	68 04 00 00 00       	pushq  $0x4
  40103b:	e9 a0 ff ff ff       	jmpq   400fe0 <_init+0x28>

0000000000401040 <_Znam@plt>:
  401040:	ff 25 fa 1f 20 00    	jmpq   *0x201ffa(%rip)        # 603040 <_GLOBAL_OFFSET_TABLE_+0x40>
  401046:	68 05 00 00 00       	pushq  $0x5
  40104b:	e9 90 ff ff ff       	jmpq   400fe0 <_init+0x28>

0000000000401050 <_ZdlPv@plt>:
  401050:	ff 25 f2 1f 20 00    	jmpq   *0x201ff2(%rip)        # 603048 <_GLOBAL_OFFSET_TABLE_+0x48>
  401056:	68 06 00 00 00       	pushq  $0x6
  40105b:	e9 80 ff ff ff       	jmpq   400fe0 <_init+0x28>

0000000000401060 <htons@plt>:
  401060:	ff 25 ea 1f 20 00    	jmpq   *0x201fea(%rip)        # 603050 <_GLOBAL_OFFSET_TABLE_+0x50>
  401066:	68 07 00 00 00       	pushq  $0x7
  40106b:	e9 70 ff ff ff       	jmpq   400fe0 <_init+0x28>

0000000000401070 <exit@plt>:
  401070:	ff 25 e2 1f 20 00    	jmpq   *0x201fe2(%rip)        # 603058 <_GLOBAL_OFFSET_TABLE_+0x58>
  401076:	68 08 00 00 00       	pushq  $0x8
  40107b:	e9 60 ff ff ff       	jmpq   400fe0 <_init+0x28>

0000000000401080 <__cxa_throw_bad_array_new_length@plt>:
  401080:	ff 25 da 1f 20 00    	jmpq   *0x201fda(%rip)        # 603060 <_GLOBAL_OFFSET_TABLE_+0x60>
  401086:	68 09 00 00 00       	pushq  $0x9
  40108b:	e9 50 ff ff ff       	jmpq   400fe0 <_init+0x28>

0000000000401090 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv@plt>:
  401090:	ff 25 d2 1f 20 00    	jmpq   *0x201fd2(%rip)        # 603068 <_GLOBAL_OFFSET_TABLE_+0x68>
  401096:	68 0a 00 00 00       	pushq  $0xa
  40109b:	e9 40 ff ff ff       	jmpq   400fe0 <_init+0x28>

00000000004010a0 <__libc_start_main@plt>:
  4010a0:	ff 25 ca 1f 20 00    	jmpq   *0x201fca(%rip)        # 603070 <_GLOBAL_OFFSET_TABLE_+0x70>
  4010a6:	68 0b 00 00 00       	pushq  $0xb
  4010ab:	e9 30 ff ff ff       	jmpq   400fe0 <_init+0x28>

00000000004010b0 <__cxa_atexit@plt>:
  4010b0:	ff 25 c2 1f 20 00    	jmpq   *0x201fc2(%rip)        # 603078 <_GLOBAL_OFFSET_TABLE_+0x78>
  4010b6:	68 0c 00 00 00       	pushq  $0xc
  4010bb:	e9 20 ff ff ff       	jmpq   400fe0 <_init+0x28>

00000000004010c0 <fgets@plt>:
  4010c0:	ff 25 ba 1f 20 00    	jmpq   *0x201fba(%rip)        # 603080 <_GLOBAL_OFFSET_TABLE_+0x80>
  4010c6:	68 0d 00 00 00       	pushq  $0xd
  4010cb:	e9 10 ff ff ff       	jmpq   400fe0 <_init+0x28>

00000000004010d0 <bzero@plt>:
  4010d0:	ff 25 b2 1f 20 00    	jmpq   *0x201fb2(%rip)        # 603088 <_GLOBAL_OFFSET_TABLE_+0x88>
  4010d6:	68 0e 00 00 00       	pushq  $0xe
  4010db:	e9 00 ff ff ff       	jmpq   400fe0 <_init+0x28>

00000000004010e0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev@plt>:
  4010e0:	ff 25 aa 1f 20 00    	jmpq   *0x201faa(%rip)        # 603090 <_GLOBAL_OFFSET_TABLE_+0x90>
  4010e6:	68 0f 00 00 00       	pushq  $0xf
  4010eb:	e9 f0 fe ff ff       	jmpq   400fe0 <_init+0x28>

00000000004010f0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev@plt>:
  4010f0:	ff 25 a2 1f 20 00    	jmpq   *0x201fa2(%rip)        # 603098 <_GLOBAL_OFFSET_TABLE_+0x98>
  4010f6:	68 10 00 00 00       	pushq  $0x10
  4010fb:	e9 e0 fe ff ff       	jmpq   400fe0 <_init+0x28>

0000000000401100 <atoi@plt>:
  401100:	ff 25 9a 1f 20 00    	jmpq   *0x201f9a(%rip)        # 6030a0 <_GLOBAL_OFFSET_TABLE_+0xa0>
  401106:	68 11 00 00 00       	pushq  $0x11
  40110b:	e9 d0 fe ff ff       	jmpq   400fe0 <_init+0x28>

0000000000401110 <signal@plt>:
  401110:	ff 25 92 1f 20 00    	jmpq   *0x201f92(%rip)        # 6030a8 <_GLOBAL_OFFSET_TABLE_+0xa8>
  401116:	68 12 00 00 00       	pushq  $0x12
  40111b:	e9 c0 fe ff ff       	jmpq   400fe0 <_init+0x28>

0000000000401120 <socket@plt>:
  401120:	ff 25 8a 1f 20 00    	jmpq   *0x201f8a(%rip)        # 6030b0 <_GLOBAL_OFFSET_TABLE_+0xb0>
  401126:	68 13 00 00 00       	pushq  $0x13
  40112b:	e9 b0 fe ff ff       	jmpq   400fe0 <_init+0x28>

0000000000401130 <_ZNSaIcED1Ev@plt>:
  401130:	ff 25 82 1f 20 00    	jmpq   *0x201f82(%rip)        # 6030b8 <_GLOBAL_OFFSET_TABLE_+0xb8>
  401136:	68 14 00 00 00       	pushq  $0x14
  40113b:	e9 a0 fe ff ff       	jmpq   400fe0 <_init+0x28>

0000000000401140 <_ZdaPv@plt>:
  401140:	ff 25 7a 1f 20 00    	jmpq   *0x201f7a(%rip)        # 6030c0 <_GLOBAL_OFFSET_TABLE_+0xc0>
  401146:	68 15 00 00 00       	pushq  $0x15
  40114b:	e9 90 fe ff ff       	jmpq   400fe0 <_init+0x28>

0000000000401150 <memcmp@plt>:
  401150:	ff 25 72 1f 20 00    	jmpq   *0x201f72(%rip)        # 6030c8 <_GLOBAL_OFFSET_TABLE_+0xc8>
  401156:	68 16 00 00 00       	pushq  $0x16
  40115b:	e9 80 fe ff ff       	jmpq   400fe0 <_init+0x28>

0000000000401160 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEm@plt>:
  401160:	ff 25 6a 1f 20 00    	jmpq   *0x201f6a(%rip)        # 6030d0 <_GLOBAL_OFFSET_TABLE_+0xd0>
  401166:	68 17 00 00 00       	pushq  $0x17
  40116b:	e9 70 fe ff ff       	jmpq   400fe0 <_init+0x28>

0000000000401170 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_@plt>:
  401170:	ff 25 62 1f 20 00    	jmpq   *0x201f62(%rip)        # 6030d8 <_GLOBAL_OFFSET_TABLE_+0xd8>
  401176:	68 18 00 00 00       	pushq  $0x18
  40117b:	e9 60 fe ff ff       	jmpq   400fe0 <_init+0x28>

0000000000401180 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv@plt>:
  401180:	ff 25 5a 1f 20 00    	jmpq   *0x201f5a(%rip)        # 6030e0 <_GLOBAL_OFFSET_TABLE_+0xe0>
  401186:	68 19 00 00 00       	pushq  $0x19
  40118b:	e9 50 fe ff ff       	jmpq   400fe0 <_init+0x28>

0000000000401190 <bind@plt>:
  401190:	ff 25 52 1f 20 00    	jmpq   *0x201f52(%rip)        # 6030e8 <_GLOBAL_OFFSET_TABLE_+0xe8>
  401196:	68 1a 00 00 00       	pushq  $0x1a
  40119b:	e9 40 fe ff ff       	jmpq   400fe0 <_init+0x28>

00000000004011a0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_@plt>:
  4011a0:	ff 25 4a 1f 20 00    	jmpq   *0x201f4a(%rip)        # 6030f0 <_GLOBAL_OFFSET_TABLE_+0xf0>
  4011a6:	68 1b 00 00 00       	pushq  $0x1b
  4011ab:	e9 30 fe ff ff       	jmpq   400fe0 <_init+0x28>

00000000004011b0 <_ZNSaIcEC1Ev@plt>:
  4011b0:	ff 25 42 1f 20 00    	jmpq   *0x201f42(%rip)        # 6030f8 <_GLOBAL_OFFSET_TABLE_+0xf8>
  4011b6:	68 1c 00 00 00       	pushq  $0x1c
  4011bb:	e9 20 fe ff ff       	jmpq   400fe0 <_init+0x28>

00000000004011c0 <__gxx_personality_v0@plt>:
  4011c0:	ff 25 3a 1f 20 00    	jmpq   *0x201f3a(%rip)        # 603100 <_GLOBAL_OFFSET_TABLE_+0x100>
  4011c6:	68 1d 00 00 00       	pushq  $0x1d
  4011cb:	e9 10 fe ff ff       	jmpq   400fe0 <_init+0x28>

00000000004011d0 <fprintf@plt>:
  4011d0:	ff 25 32 1f 20 00    	jmpq   *0x201f32(%rip)        # 603108 <_GLOBAL_OFFSET_TABLE_+0x108>
  4011d6:	68 1e 00 00 00       	pushq  $0x1e
  4011db:	e9 00 fe ff ff       	jmpq   400fe0 <_init+0x28>

00000000004011e0 <_Unwind_Resume@plt>:
  4011e0:	ff 25 2a 1f 20 00    	jmpq   *0x201f2a(%rip)        # 603110 <_GLOBAL_OFFSET_TABLE_+0x110>
  4011e6:	68 1f 00 00 00       	pushq  $0x1f
  4011eb:	e9 f0 fd ff ff       	jmpq   400fe0 <_init+0x28>

00000000004011f0 <memcpy@plt>:
  4011f0:	ff 25 22 1f 20 00    	jmpq   *0x201f22(%rip)        # 603118 <_GLOBAL_OFFSET_TABLE_+0x118>
  4011f6:	68 20 00 00 00       	pushq  $0x20
  4011fb:	e9 e0 fd ff ff       	jmpq   400fe0 <_init+0x28>

0000000000401200 <fflush@plt>:
  401200:	ff 25 1a 1f 20 00    	jmpq   *0x201f1a(%rip)        # 603120 <_GLOBAL_OFFSET_TABLE_+0x120>
  401206:	68 21 00 00 00       	pushq  $0x21
  40120b:	e9 d0 fd ff ff       	jmpq   400fe0 <_init+0x28>

0000000000401210 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc@plt>:
  401210:	ff 25 12 1f 20 00    	jmpq   *0x201f12(%rip)        # 603128 <_GLOBAL_OFFSET_TABLE_+0x128>
  401216:	68 22 00 00 00       	pushq  $0x22
  40121b:	e9 c0 fd ff ff       	jmpq   400fe0 <_init+0x28>

Disassembly of section .plt.got:

0000000000401220 <.plt.got>:
  401220:	ff 25 d2 1d 20 00    	jmpq   *0x201dd2(%rip)        # 602ff8 <_DYNAMIC+0x200>
  401226:	66 90                	xchg   %ax,%ax

Disassembly of section .text:

0000000000401230 <_start>:
  401230:	31 ed                	xor    %ebp,%ebp
  401232:	49 89 d1             	mov    %rdx,%r9
  401235:	5e                   	pop    %rsi
  401236:	48 89 e2             	mov    %rsp,%rdx
  401239:	48 83 e4 f0          	and    $0xfffffffffffffff0,%rsp
  40123d:	50                   	push   %rax
  40123e:	54                   	push   %rsp
  40123f:	49 c7 c0 90 1f 40 00 	mov    $0x401f90,%r8
  401246:	48 c7 c1 20 1f 40 00 	mov    $0x401f20,%rcx
  40124d:	48 c7 c7 26 13 40 00 	mov    $0x401326,%rdi
  401254:	e8 47 fe ff ff       	callq  4010a0 <__libc_start_main@plt>
  401259:	f4                   	hlt    
  40125a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000401260 <deregister_tm_clones>:
  401260:	b8 3f 31 60 00       	mov    $0x60313f,%eax
  401265:	55                   	push   %rbp
  401266:	48 2d 38 31 60 00    	sub    $0x603138,%rax
  40126c:	48 83 f8 0e          	cmp    $0xe,%rax
  401270:	48 89 e5             	mov    %rsp,%rbp
  401273:	76 1b                	jbe    401290 <deregister_tm_clones+0x30>
  401275:	b8 00 00 00 00       	mov    $0x0,%eax
  40127a:	48 85 c0             	test   %rax,%rax
  40127d:	74 11                	je     401290 <deregister_tm_clones+0x30>
  40127f:	5d                   	pop    %rbp
  401280:	bf 38 31 60 00       	mov    $0x603138,%edi
  401285:	ff e0                	jmpq   *%rax
  401287:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  40128e:	00 00 
  401290:	5d                   	pop    %rbp
  401291:	c3                   	retq   
  401292:	0f 1f 40 00          	nopl   0x0(%rax)
  401296:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  40129d:	00 00 00 

00000000004012a0 <register_tm_clones>:
  4012a0:	be 38 31 60 00       	mov    $0x603138,%esi
  4012a5:	55                   	push   %rbp
  4012a6:	48 81 ee 38 31 60 00 	sub    $0x603138,%rsi
  4012ad:	48 c1 fe 03          	sar    $0x3,%rsi
  4012b1:	48 89 e5             	mov    %rsp,%rbp
  4012b4:	48 89 f0             	mov    %rsi,%rax
  4012b7:	48 c1 e8 3f          	shr    $0x3f,%rax
  4012bb:	48 01 c6             	add    %rax,%rsi
  4012be:	48 d1 fe             	sar    %rsi
  4012c1:	74 15                	je     4012d8 <register_tm_clones+0x38>
  4012c3:	b8 00 00 00 00       	mov    $0x0,%eax
  4012c8:	48 85 c0             	test   %rax,%rax
  4012cb:	74 0b                	je     4012d8 <register_tm_clones+0x38>
  4012cd:	5d                   	pop    %rbp
  4012ce:	bf 38 31 60 00       	mov    $0x603138,%edi
  4012d3:	ff e0                	jmpq   *%rax
  4012d5:	0f 1f 00             	nopl   (%rax)
  4012d8:	5d                   	pop    %rbp
  4012d9:	c3                   	retq   
  4012da:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

00000000004012e0 <__do_global_dtors_aux>:
  4012e0:	80 3d 89 1e 20 00 00 	cmpb   $0x0,0x201e89(%rip)        # 603170 <completed.6939>
  4012e7:	75 11                	jne    4012fa <__do_global_dtors_aux+0x1a>
  4012e9:	55                   	push   %rbp
  4012ea:	48 89 e5             	mov    %rsp,%rbp
  4012ed:	e8 6e ff ff ff       	callq  401260 <deregister_tm_clones>
  4012f2:	5d                   	pop    %rbp
  4012f3:	c6 05 76 1e 20 00 01 	movb   $0x1,0x201e76(%rip)        # 603170 <completed.6939>
  4012fa:	f3 c3                	repz retq 
  4012fc:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000401300 <frame_dummy>:
  401300:	bf f0 2d 60 00       	mov    $0x602df0,%edi
  401305:	48 83 3f 00          	cmpq   $0x0,(%rdi)
  401309:	75 05                	jne    401310 <frame_dummy+0x10>
  40130b:	eb 93                	jmp    4012a0 <register_tm_clones>
  40130d:	0f 1f 00             	nopl   (%rax)
  401310:	b8 00 00 00 00       	mov    $0x0,%eax
  401315:	48 85 c0             	test   %rax,%rax
  401318:	74 f1                	je     40130b <frame_dummy+0xb>
  40131a:	55                   	push   %rbp
  40131b:	48 89 e5             	mov    %rsp,%rbp
  40131e:	ff d0                	callq  *%rax
  401320:	5d                   	pop    %rbp
  401321:	e9 7a ff ff ff       	jmpq   4012a0 <register_tm_clones>

0000000000401326 <main>:

void SignalHandler(int param);

CTFTPServer MainTFTPServer;

int main(int argc, char * argv[]){
  401326:	55                   	push   %rbp
  401327:	48 89 e5             	mov    %rsp,%rbp
  40132a:	53                   	push   %rbx
  40132b:	48 83 ec 58          	sub    $0x58,%rsp
  40132f:	89 7d ac             	mov    %edi,-0x54(%rbp)
  401332:	48 89 75 a0          	mov    %rsi,-0x60(%rbp)
    std::string RootDirectory = ".";
  401336:	48 8d 45 eb          	lea    -0x15(%rbp),%rax
  40133a:	48 89 c7             	mov    %rax,%rdi
  40133d:	e8 6e fe ff ff       	callq  4011b0 <_ZNSaIcEC1Ev@plt>
  401342:	48 8d 55 eb          	lea    -0x15(%rbp),%rdx
  401346:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
  40134a:	be b1 1f 40 00       	mov    $0x401fb1,%esi
  40134f:	48 89 c7             	mov    %rax,%rdi
  401352:	e8 49 fe ff ff       	callq  4011a0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_@plt>
  401357:	48 8d 45 eb          	lea    -0x15(%rbp),%rax
  40135b:	48 89 c7             	mov    %rax,%rdi
  40135e:	e8 cd fd ff ff       	callq  401130 <_ZNSaIcED1Ev@plt>
    int MainPort = 49999;
  401363:	c7 45 ec 4f c3 00 00 	movl   $0xc34f,-0x14(%rbp)
    struct timeval CurrentTime;
    
    
    if(2 <= argc){
  40136a:	83 7d ac 01          	cmpl   $0x1,-0x54(%rbp)
  40136e:	7e 73                	jle    4013e3 <main+0xbd>
        MainPort = atoi(argv[1]);
  401370:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  401374:	48 83 c0 08          	add    $0x8,%rax
  401378:	48 8b 00             	mov    (%rax),%rax
  40137b:	48 89 c7             	mov    %rax,%rdi
  40137e:	e8 7d fd ff ff       	callq  401100 <atoi@plt>
  401383:	89 45 ec             	mov    %eax,-0x14(%rbp)
        if((1 > MainPort)||(65535 < MainPort)){
  401386:	83 7d ec 00          	cmpl   $0x0,-0x14(%rbp)
  40138a:	7e 09                	jle    401395 <main+0x6f>
  40138c:	81 7d ec ff ff 00 00 	cmpl   $0xffff,-0x14(%rbp)
  401393:	7e 2e                	jle    4013c3 <main+0x9d>
            fprintf(stderr,"Invalid port \"%s\", must be in range [1 65,535]\n",argv[1]);
  401395:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  401399:	48 83 c0 08          	add    $0x8,%rax
  40139d:	48 8b 10             	mov    (%rax),%rdx
  4013a0:	48 8b 05 b9 1d 20 00 	mov    0x201db9(%rip),%rax        # 603160 <stderr@@GLIBC_2.2.5>
  4013a7:	be b8 1f 40 00       	mov    $0x401fb8,%esi
  4013ac:	48 89 c7             	mov    %rax,%rdi
  4013af:	b8 00 00 00 00       	mov    $0x0,%eax
  4013b4:	e8 17 fe ff ff       	callq  4011d0 <fprintf@plt>
            return 0;
  4013b9:	bb 00 00 00 00       	mov    $0x0,%ebx
  4013be:	e9 a9 00 00 00       	jmpq   40146c <main+0x146>
        }
        if(3 <= argc){
  4013c3:	83 7d ac 02          	cmpl   $0x2,-0x54(%rbp)
  4013c7:	7e 1a                	jle    4013e3 <main+0xbd>
            RootDirectory = argv[2];
  4013c9:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  4013cd:	48 83 c0 10          	add    $0x10,%rax
  4013d1:	48 8b 10             	mov    (%rax),%rdx
  4013d4:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
  4013d8:	48 89 d6             	mov    %rdx,%rsi
  4013db:	48 89 c7             	mov    %rax,%rdi
  4013de:	e8 2d fe ff ff       	callq  401210 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc@plt>
        }
    }
    if(!MainTFTPServer.Open(MainPort, RootDirectory)){
  4013e3:	48 8d 55 c0          	lea    -0x40(%rbp),%rdx
  4013e7:	8b 45 ec             	mov    -0x14(%rbp),%eax
  4013ea:	89 c6                	mov    %eax,%esi
  4013ec:	bf 80 31 60 00       	mov    $0x603180,%edi
  4013f1:	e8 90 05 00 00       	callq  401986 <_ZN11CTFTPServer4OpenEiRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
  4013f6:	83 f0 01             	xor    $0x1,%eax
  4013f9:	84 c0                	test   %al,%al
  4013fb:	74 23                	je     401420 <main+0xfa>
        fprintf(stderr,"Failed to start TFTP server on port %d\n",MainPort);
  4013fd:	48 8b 05 5c 1d 20 00 	mov    0x201d5c(%rip),%rax        # 603160 <stderr@@GLIBC_2.2.5>
  401404:	8b 55 ec             	mov    -0x14(%rbp),%edx
  401407:	be e8 1f 40 00       	mov    $0x401fe8,%esi
  40140c:	48 89 c7             	mov    %rax,%rdi
  40140f:	b8 00 00 00 00       	mov    $0x0,%eax
  401414:	e8 b7 fd ff ff       	callq  4011d0 <fprintf@plt>
        return 0;
  401419:	bb 00 00 00 00       	mov    $0x0,%ebx
  40141e:	eb 4c                	jmp    40146c <main+0x146>
    }
    
    signal(SIGTERM, SignalHandler);
  401420:	be b7 14 40 00       	mov    $0x4014b7,%esi
  401425:	bf 0f 00 00 00       	mov    $0xf,%edi
  40142a:	e8 e1 fc ff ff       	callq  401110 <signal@plt>
    signal(SIGINT, SignalHandler);
  40142f:	be b7 14 40 00       	mov    $0x4014b7,%esi
  401434:	bf 02 00 00 00       	mov    $0x2,%edi
  401439:	e8 d2 fc ff ff       	callq  401110 <signal@plt>
    signal(SIGUSR1, SignalHandler);
  40143e:	be b7 14 40 00       	mov    $0x4014b7,%esi
  401443:	bf 0a 00 00 00       	mov    $0xa,%edi
  401448:	e8 c3 fc ff ff       	callq  401110 <signal@plt>
    while(MainTFTPServer.ProcessMessages());
  40144d:	bf 80 31 60 00       	mov    $0x603180,%edi
  401452:	e8 df 06 00 00       	callq  401b36 <_ZN11CTFTPServer15ProcessMessagesEv>
  401457:	84 c0                	test   %al,%al
  401459:	74 02                	je     40145d <main+0x137>
  40145b:	eb f0                	jmp    40144d <main+0x127>

    MainTFTPServer.Close();
  40145d:	bf 80 31 60 00       	mov    $0x603180,%edi
  401462:	e8 9d 06 00 00       	callq  401b04 <_ZN11CTFTPServer5CloseEv>
    return 0;
  401467:	bb 00 00 00 00       	mov    $0x0,%ebx
void SignalHandler(int param);

CTFTPServer MainTFTPServer;

int main(int argc, char * argv[]){
    std::string RootDirectory = ".";
  40146c:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
  401470:	48 89 c7             	mov    %rax,%rdi
  401473:	e8 78 fc ff ff       	callq  4010f0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev@plt>
  401478:	89 d8                	mov    %ebx,%eax
  40147a:	eb 34                	jmp    4014b0 <main+0x18a>
  40147c:	48 89 c3             	mov    %rax,%rbx
  40147f:	48 8d 45 eb          	lea    -0x15(%rbp),%rax
  401483:	48 89 c7             	mov    %rax,%rdi
  401486:	e8 a5 fc ff ff       	callq  401130 <_ZNSaIcED1Ev@plt>
  40148b:	48 89 d8             	mov    %rbx,%rax
  40148e:	48 89 c7             	mov    %rax,%rdi
  401491:	e8 4a fd ff ff       	callq  4011e0 <_Unwind_Resume@plt>
  401496:	48 89 c3             	mov    %rax,%rbx
  401499:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
  40149d:	48 89 c7             	mov    %rax,%rdi
  4014a0:	e8 4b fc ff ff       	callq  4010f0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev@plt>
  4014a5:	48 89 d8             	mov    %rbx,%rax
  4014a8:	48 89 c7             	mov    %rax,%rdi
  4014ab:	e8 30 fd ff ff       	callq  4011e0 <_Unwind_Resume@plt>
    signal(SIGUSR1, SignalHandler);
    while(MainTFTPServer.ProcessMessages());

    MainTFTPServer.Close();
    return 0;
}
  4014b0:	48 83 c4 58          	add    $0x58,%rsp
  4014b4:	5b                   	pop    %rbx
  4014b5:	5d                   	pop    %rbp
  4014b6:	c3                   	retq   

00000000004014b7 <_Z13SignalHandleri>:


void SignalHandler(int param){
  4014b7:	55                   	push   %rbp
  4014b8:	48 89 e5             	mov    %rsp,%rbp
  4014bb:	48 81 ec 10 04 00 00 	sub    $0x410,%rsp
  4014c2:	89 bd fc fb ff ff    	mov    %edi,-0x404(%rbp)
    char Buffer[1024];
    printf("Do you want to terminate? ");
  4014c8:	bf 10 20 40 00       	mov    $0x402010,%edi
  4014cd:	b8 00 00 00 00       	mov    $0x0,%eax
  4014d2:	e8 29 fb ff ff       	callq  401000 <printf@plt>
    fflush(stdout);
  4014d7:	48 8b 05 8a 1c 20 00 	mov    0x201c8a(%rip),%rax        # 603168 <stdout@@GLIBC_2.2.5>
  4014de:	48 89 c7             	mov    %rax,%rdi
  4014e1:	e8 1a fd ff ff       	callq  401200 <fflush@plt>
    fgets(Buffer,1024, stdin);
  4014e6:	48 8b 15 53 1c 20 00 	mov    0x201c53(%rip),%rdx        # 603140 <stdin@@GLIBC_2.2.5>
  4014ed:	48 8d 85 00 fc ff ff 	lea    -0x400(%rbp),%rax
  4014f4:	be 00 04 00 00       	mov    $0x400,%esi
  4014f9:	48 89 c7             	mov    %rax,%rdi
  4014fc:	e8 bf fb ff ff       	callq  4010c0 <fgets@plt>
    if(('y' == Buffer[0])||('Y' == Buffer[0])){
  401501:	0f b6 85 00 fc ff ff 	movzbl -0x400(%rbp),%eax
  401508:	3c 79                	cmp    $0x79,%al
  40150a:	74 0b                	je     401517 <_Z13SignalHandleri+0x60>
  40150c:	0f b6 85 00 fc ff ff 	movzbl -0x400(%rbp),%eax
  401513:	3c 59                	cmp    $0x59,%al
  401515:	75 14                	jne    40152b <_Z13SignalHandleri+0x74>
        MainTFTPServer.Close();
  401517:	bf 80 31 60 00       	mov    $0x603180,%edi
  40151c:	e8 e3 05 00 00       	callq  401b04 <_ZN11CTFTPServer5CloseEv>
        exit(0);
  401521:	bf 00 00 00 00       	mov    $0x0,%edi
  401526:	e8 45 fb ff ff       	callq  401070 <exit@plt>
    }
}
  40152b:	90                   	nop
  40152c:	c9                   	leaveq 
  40152d:	c3                   	retq   

000000000040152e <_ZN11CTFTPServerC1Ev>:


CTFTPServer::CTFTPServer(){
  40152e:	55                   	push   %rbp
  40152f:	48 89 e5             	mov    %rsp,%rbp
  401532:	53                   	push   %rbx
  401533:	48 83 ec 18          	sub    $0x18,%rsp
  401537:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  40153b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40153f:	48 83 c0 08          	add    $0x8,%rax
  401543:	48 89 c7             	mov    %rax,%rdi
  401546:	e8 95 fb ff ff       	callq  4010e0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev@plt>
  40154b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40154f:	48 83 c0 38          	add    $0x38,%rax
  401553:	48 89 c7             	mov    %rax,%rdi
  401556:	e8 55 06 00 00       	callq  401bb0 <_ZNSt7__cxx114listI17STransferProgressSaIS1_EEC1Ev>
    DListeningSocket = -1;
  40155b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40155f:	c7 00 ff ff ff ff    	movl   $0xffffffff,(%rax)
    DRootDirectory = ".";
  401565:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  401569:	48 83 c0 08          	add    $0x8,%rax
  40156d:	be b1 1f 40 00       	mov    $0x401fb1,%esi
  401572:	48 89 c7             	mov    %rax,%rdi
  401575:	e8 96 fc ff ff       	callq  401210 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc@plt>
    DPollFDSize = 0;
  40157a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40157e:	c7 40 30 00 00 00 00 	movl   $0x0,0x30(%rax)
    DPollFDs = NULL;
  401585:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  401589:	48 c7 40 28 00 00 00 	movq   $0x0,0x28(%rax)
  401590:	00 
}
  401591:	eb 2e                	jmp    4015c1 <_ZN11CTFTPServerC1Ev+0x93>
  401593:	48 89 c3             	mov    %rax,%rbx
        exit(0);
    }
}


CTFTPServer::CTFTPServer(){
  401596:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40159a:	48 83 c0 38          	add    $0x38,%rax
  40159e:	48 89 c7             	mov    %rax,%rdi
  4015a1:	e8 ee 05 00 00       	callq  401b94 <_ZNSt7__cxx114listI17STransferProgressSaIS1_EED1Ev>
  4015a6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4015aa:	48 83 c0 08          	add    $0x8,%rax
  4015ae:	48 89 c7             	mov    %rax,%rdi
  4015b1:	e8 3a fb ff ff       	callq  4010f0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev@plt>
  4015b6:	48 89 d8             	mov    %rbx,%rax
  4015b9:	48 89 c7             	mov    %rax,%rdi
  4015bc:	e8 1f fc ff ff       	callq  4011e0 <_Unwind_Resume@plt>
    DListeningSocket = -1;
    DRootDirectory = ".";
    DPollFDSize = 0;
    DPollFDs = NULL;
}
  4015c1:	48 83 c4 18          	add    $0x18,%rsp
  4015c5:	5b                   	pop    %rbx
  4015c6:	5d                   	pop    %rbp
  4015c7:	c3                   	retq   

00000000004015c8 <_ZN11CTFTPServerD1Ev>:

CTFTPServer::~CTFTPServer(){
  4015c8:	55                   	push   %rbp
  4015c9:	48 89 e5             	mov    %rsp,%rbp
  4015cc:	48 83 ec 10          	sub    $0x10,%rsp
  4015d0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    if(NULL != DPollFDs){
  4015d4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4015d8:	48 8b 40 28          	mov    0x28(%rax),%rax
  4015dc:	48 85 c0             	test   %rax,%rax
  4015df:	74 1d                	je     4015fe <_ZN11CTFTPServerD1Ev+0x36>
        delete [] DPollFDs;
  4015e1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4015e5:	48 8b 40 28          	mov    0x28(%rax),%rax
  4015e9:	48 85 c0             	test   %rax,%rax
  4015ec:	74 10                	je     4015fe <_ZN11CTFTPServerD1Ev+0x36>
  4015ee:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4015f2:	48 8b 40 28          	mov    0x28(%rax),%rax
  4015f6:	48 89 c7             	mov    %rax,%rdi
  4015f9:	e8 42 fb ff ff       	callq  401140 <_ZdaPv@plt>
    DRootDirectory = ".";
    DPollFDSize = 0;
    DPollFDs = NULL;
}

CTFTPServer::~CTFTPServer(){
  4015fe:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  401602:	48 83 c0 38          	add    $0x38,%rax
  401606:	48 89 c7             	mov    %rax,%rdi
  401609:	e8 86 05 00 00       	callq  401b94 <_ZNSt7__cxx114listI17STransferProgressSaIS1_EED1Ev>
  40160e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  401612:	48 83 c0 08          	add    $0x8,%rax
  401616:	48 89 c7             	mov    %rax,%rdi
  401619:	e8 d2 fa ff ff       	callq  4010f0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev@plt>
    if(NULL != DPollFDs){
        delete [] DPollFDs;
    }
}
  40161e:	90                   	nop
  40161f:	c9                   	leaveq 
  401620:	c3                   	retq   
  401621:	90                   	nop

0000000000401622 <_ZN11CTFTPServer13ResizePollFDsEv>:

bool CTFTPServer::ResizePollFDs(){
  401622:	55                   	push   %rbp
  401623:	48 89 e5             	mov    %rsp,%rbp
  401626:	48 83 ec 10          	sub    $0x10,%rsp
  40162a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    if(DPollFDSize < 128){
  40162e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  401632:	8b 40 30             	mov    0x30(%rax),%eax
  401635:	83 f8 7f             	cmp    $0x7f,%eax
  401638:	7f 0d                	jg     401647 <_ZN11CTFTPServer13ResizePollFDsEv+0x25>
        DPollFDSize = 128;
  40163a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40163e:	c7 40 30 80 00 00 00 	movl   $0x80,0x30(%rax)
  401645:	eb 11                	jmp    401658 <_ZN11CTFTPServer13ResizePollFDsEv+0x36>
    }
    else{
        DPollFDSize *= 2;
  401647:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40164b:	8b 40 30             	mov    0x30(%rax),%eax
  40164e:	8d 14 00             	lea    (%rax,%rax,1),%edx
  401651:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  401655:	89 50 30             	mov    %edx,0x30(%rax)
    }
    if(NULL != DPollFDs){
  401658:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40165c:	48 8b 40 28          	mov    0x28(%rax),%rax
  401660:	48 85 c0             	test   %rax,%rax
  401663:	74 1d                	je     401682 <_ZN11CTFTPServer13ResizePollFDsEv+0x60>
        delete [] DPollFDs;
  401665:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  401669:	48 8b 40 28          	mov    0x28(%rax),%rax
  40166d:	48 85 c0             	test   %rax,%rax
  401670:	74 10                	je     401682 <_ZN11CTFTPServer13ResizePollFDsEv+0x60>
  401672:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  401676:	48 8b 40 28          	mov    0x28(%rax),%rax
  40167a:	48 89 c7             	mov    %rax,%rdi
  40167d:	e8 be fa ff ff       	callq  401140 <_ZdaPv@plt>
    }
    DPollFDs = new struct pollfd[DPollFDSize];
  401682:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  401686:	8b 40 30             	mov    0x30(%rax),%eax
  401689:	48 98                	cltq   
  40168b:	48 ba ff ff ff ff ff 	movabs $0xfffffffffffffff,%rdx
  401692:	ff ff 0f 
  401695:	48 39 d0             	cmp    %rdx,%rax
  401698:	77 06                	ja     4016a0 <_ZN11CTFTPServer13ResizePollFDsEv+0x7e>
  40169a:	48 c1 e0 03          	shl    $0x3,%rax
  40169e:	eb 05                	jmp    4016a5 <_ZN11CTFTPServer13ResizePollFDsEv+0x83>
  4016a0:	e8 db f9 ff ff       	callq  401080 <__cxa_throw_bad_array_new_length@plt>
  4016a5:	48 89 c7             	mov    %rax,%rdi
  4016a8:	e8 93 f9 ff ff       	callq  401040 <_Znam@plt>
  4016ad:	48 89 c2             	mov    %rax,%rdx
  4016b0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4016b4:	48 89 50 28          	mov    %rdx,0x28(%rax)
    return DPollFDs != NULL;
  4016b8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4016bc:	48 8b 40 28          	mov    0x28(%rax),%rax
  4016c0:	48 85 c0             	test   %rax,%rax
  4016c3:	0f 95 c0             	setne  %al
}
  4016c6:	c9                   	leaveq 
  4016c7:	c3                   	retq   

00000000004016c8 <_ZN11CTFTPServer14CompareAddressERK11sockaddr_inS2_>:

bool CTFTPServer::CompareAddress(const struct sockaddr_in &left, const struct sockaddr_in &right){
  4016c8:	55                   	push   %rbp
  4016c9:	48 89 e5             	mov    %rsp,%rbp
  4016cc:	48 83 ec 10          	sub    $0x10,%rsp
  4016d0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4016d4:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    if(left.sin_port != right.sin_port){
  4016d8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4016dc:	0f b7 50 02          	movzwl 0x2(%rax),%edx
  4016e0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4016e4:	0f b7 40 02          	movzwl 0x2(%rax),%eax
  4016e8:	66 39 c2             	cmp    %ax,%dx
  4016eb:	74 07                	je     4016f4 <_ZN11CTFTPServer14CompareAddressERK11sockaddr_inS2_+0x2c>
        return false;
  4016ed:	b8 00 00 00 00       	mov    $0x0,%eax
  4016f2:	eb 30                	jmp    401724 <_ZN11CTFTPServer14CompareAddressERK11sockaddr_inS2_+0x5c>
    }
    if(memcmp(&left.sin_addr, &right.sin_addr, sizeof(struct in_addr))){
  4016f4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4016f8:	48 8d 48 04          	lea    0x4(%rax),%rcx
  4016fc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  401700:	48 83 c0 04          	add    $0x4,%rax
  401704:	ba 04 00 00 00       	mov    $0x4,%edx
  401709:	48 89 ce             	mov    %rcx,%rsi
  40170c:	48 89 c7             	mov    %rax,%rdi
  40170f:	e8 3c fa ff ff       	callq  401150 <memcmp@plt>
  401714:	85 c0                	test   %eax,%eax
  401716:	74 07                	je     40171f <_ZN11CTFTPServer14CompareAddressERK11sockaddr_inS2_+0x57>
        return false;
  401718:	b8 00 00 00 00       	mov    $0x0,%eax
  40171d:	eb 05                	jmp    401724 <_ZN11CTFTPServer14CompareAddressERK11sockaddr_inS2_+0x5c>
    }
    return true;
  40171f:	b8 01 00 00 00       	mov    $0x1,%eax
}
  401724:	c9                   	leaveq 
  401725:	c3                   	retq   

0000000000401726 <_ZN11CTFTPServer19ParseRequestMessageEPhiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES7_>:

bool CTFTPServer::ParseRequestMessage(uint8_t *payload, int length, std::string &filename, std::string &txmode){
  401726:	55                   	push   %rbp
  401727:	48 89 e5             	mov    %rsp,%rbp
  40172a:	48 83 ec 30          	sub    $0x30,%rsp
  40172e:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  401732:	89 75 e4             	mov    %esi,-0x1c(%rbp)
  401735:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  401739:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
    bool EndOfStringFound = false;
  40173d:	c6 45 ff 00          	movb   $0x0,-0x1(%rbp)
    int Index = 0, Anchor;
  401741:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%rbp)
    
    while(Index < length){
  401748:	8b 45 f8             	mov    -0x8(%rbp),%eax
  40174b:	3b 45 e4             	cmp    -0x1c(%rbp),%eax
  40174e:	7d 20                	jge    401770 <_ZN11CTFTPServer19ParseRequestMessageEPhiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES7_+0x4a>
        if('\0' == payload[Index]){
  401750:	8b 45 f8             	mov    -0x8(%rbp),%eax
  401753:	48 63 d0             	movslq %eax,%rdx
  401756:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40175a:	48 01 d0             	add    %rdx,%rax
  40175d:	0f b6 00             	movzbl (%rax),%eax
  401760:	84 c0                	test   %al,%al
  401762:	75 06                	jne    40176a <_ZN11CTFTPServer19ParseRequestMessageEPhiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES7_+0x44>
            EndOfStringFound = true;
  401764:	c6 45 ff 01          	movb   $0x1,-0x1(%rbp)
            break;
  401768:	eb 06                	jmp    401770 <_ZN11CTFTPServer19ParseRequestMessageEPhiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES7_+0x4a>
        }
        Index++;
  40176a:	83 45 f8 01          	addl   $0x1,-0x8(%rbp)

bool CTFTPServer::ParseRequestMessage(uint8_t *payload, int length, std::string &filename, std::string &txmode){
    bool EndOfStringFound = false;
    int Index = 0, Anchor;
    
    while(Index < length){
  40176e:	eb d8                	jmp    401748 <_ZN11CTFTPServer19ParseRequestMessageEPhiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES7_+0x22>
            EndOfStringFound = true;
            break;
        }
        Index++;
    } 
    if(!EndOfStringFound){
  401770:	0f b6 45 ff          	movzbl -0x1(%rbp),%eax
  401774:	83 f0 01             	xor    $0x1,%eax
  401777:	84 c0                	test   %al,%al
  401779:	74 07                	je     401782 <_ZN11CTFTPServer19ParseRequestMessageEPhiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES7_+0x5c>
        return false;
  40177b:	b8 00 00 00 00       	mov    $0x0,%eax
  401780:	eb 7c                	jmp    4017fe <_ZN11CTFTPServer19ParseRequestMessageEPhiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES7_+0xd8>
    }
    filename = (char *)payload;
  401782:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  401786:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40178a:	48 89 d6             	mov    %rdx,%rsi
  40178d:	48 89 c7             	mov    %rax,%rdi
  401790:	e8 7b fa ff ff       	callq  401210 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc@plt>
    Index++;
  401795:	83 45 f8 01          	addl   $0x1,-0x8(%rbp)
    Anchor = Index;
  401799:	8b 45 f8             	mov    -0x8(%rbp),%eax
  40179c:	89 45 f4             	mov    %eax,-0xc(%rbp)
    EndOfStringFound = false;
  40179f:	c6 45 ff 00          	movb   $0x0,-0x1(%rbp)
    while(Index < length){
  4017a3:	8b 45 f8             	mov    -0x8(%rbp),%eax
  4017a6:	3b 45 e4             	cmp    -0x1c(%rbp),%eax
  4017a9:	7d 20                	jge    4017cb <_ZN11CTFTPServer19ParseRequestMessageEPhiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES7_+0xa5>
        if('\0' == payload[Index]){
  4017ab:	8b 45 f8             	mov    -0x8(%rbp),%eax
  4017ae:	48 63 d0             	movslq %eax,%rdx
  4017b1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4017b5:	48 01 d0             	add    %rdx,%rax
  4017b8:	0f b6 00             	movzbl (%rax),%eax
  4017bb:	84 c0                	test   %al,%al
  4017bd:	75 06                	jne    4017c5 <_ZN11CTFTPServer19ParseRequestMessageEPhiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES7_+0x9f>
            EndOfStringFound = true;
  4017bf:	c6 45 ff 01          	movb   $0x1,-0x1(%rbp)
            break;
  4017c3:	eb 06                	jmp    4017cb <_ZN11CTFTPServer19ParseRequestMessageEPhiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES7_+0xa5>
        }
        Index++;
  4017c5:	83 45 f8 01          	addl   $0x1,-0x8(%rbp)
    }
    filename = (char *)payload;
    Index++;
    Anchor = Index;
    EndOfStringFound = false;
    while(Index < length){
  4017c9:	eb d8                	jmp    4017a3 <_ZN11CTFTPServer19ParseRequestMessageEPhiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES7_+0x7d>
            EndOfStringFound = true;
            break;
        }
        Index++;
    }
    if(!EndOfStringFound){
  4017cb:	0f b6 45 ff          	movzbl -0x1(%rbp),%eax
  4017cf:	83 f0 01             	xor    $0x1,%eax
  4017d2:	84 c0                	test   %al,%al
  4017d4:	74 07                	je     4017dd <_ZN11CTFTPServer19ParseRequestMessageEPhiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES7_+0xb7>
        return false;
  4017d6:	b8 00 00 00 00       	mov    $0x0,%eax
  4017db:	eb 21                	jmp    4017fe <_ZN11CTFTPServer19ParseRequestMessageEPhiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES7_+0xd8>
    }
    txmode = (char *)(payload + Anchor);
  4017dd:	8b 45 f4             	mov    -0xc(%rbp),%eax
  4017e0:	48 63 d0             	movslq %eax,%rdx
  4017e3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4017e7:	48 01 c2             	add    %rax,%rdx
  4017ea:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  4017ee:	48 89 d6             	mov    %rdx,%rsi
  4017f1:	48 89 c7             	mov    %rax,%rdi
  4017f4:	e8 17 fa ff ff       	callq  401210 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc@plt>
    return true;
  4017f9:	b8 01 00 00 00       	mov    $0x1,%eax
}
  4017fe:	c9                   	leaveq 
  4017ff:	c3                   	retq   

0000000000401800 <_ZN11CTFTPServer17CreateDataMessageEP12STFTPMessagetPhi>:

int CTFTPServer::CreateDataMessage(STFTPMessageRef messageref, uint16_t block, uint8_t *data, int length){
  401800:	55                   	push   %rbp
  401801:	48 89 e5             	mov    %rsp,%rbp
  401804:	53                   	push   %rbx
  401805:	48 83 ec 28          	sub    $0x28,%rsp
  401809:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  40180d:	89 f0                	mov    %esi,%eax
  40180f:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  401813:	89 4d e0             	mov    %ecx,-0x20(%rbp)
  401816:	66 89 45 e4          	mov    %ax,-0x1c(%rbp)
    messageref->DOpcode = htons(TFTP_OP_DATA);
  40181a:	bf 03 00 00 00       	mov    $0x3,%edi
  40181f:	e8 3c f8 ff ff       	callq  401060 <htons@plt>
  401824:	89 c2                	mov    %eax,%edx
  401826:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40182a:	66 89 10             	mov    %dx,(%rax)
    *(uint16_t *)messageref->DPayload = htons(block);
  40182d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  401831:	48 8d 58 02          	lea    0x2(%rax),%rbx
  401835:	0f b7 45 e4          	movzwl -0x1c(%rbp),%eax
  401839:	89 c7                	mov    %eax,%edi
  40183b:	e8 20 f8 ff ff       	callq  401060 <htons@plt>
  401840:	66 89 03             	mov    %ax,(%rbx)
    if((0 > length)||(512 < length)){
  401843:	83 7d e0 00          	cmpl   $0x0,-0x20(%rbp)
  401847:	78 09                	js     401852 <_ZN11CTFTPServer17CreateDataMessageEP12STFTPMessagetPhi+0x52>
  401849:	81 7d e0 00 02 00 00 	cmpl   $0x200,-0x20(%rbp)
  401850:	7e 07                	jle    401859 <_ZN11CTFTPServer17CreateDataMessageEP12STFTPMessagetPhi+0x59>
        return 0;
  401852:	b8 00 00 00 00       	mov    $0x0,%eax
  401857:	eb 2d                	jmp    401886 <_ZN11CTFTPServer17CreateDataMessageEP12STFTPMessagetPhi+0x86>
    }
    if(length){
  401859:	83 7d e0 00          	cmpl   $0x0,-0x20(%rbp)
  40185d:	74 21                	je     401880 <_ZN11CTFTPServer17CreateDataMessageEP12STFTPMessagetPhi+0x80>
        memcpy(messageref->DPayload + 2, data, length);
  40185f:	8b 45 e0             	mov    -0x20(%rbp),%eax
  401862:	48 63 d0             	movslq %eax,%rdx
  401865:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  401869:	48 83 c0 02          	add    $0x2,%rax
  40186d:	48 8d 48 02          	lea    0x2(%rax),%rcx
  401871:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  401875:	48 89 c6             	mov    %rax,%rsi
  401878:	48 89 cf             	mov    %rcx,%rdi
  40187b:	e8 70 f9 ff ff       	callq  4011f0 <memcpy@plt>
    }
    return length + 4;
  401880:	8b 45 e0             	mov    -0x20(%rbp),%eax
  401883:	83 c0 04             	add    $0x4,%eax
}
  401886:	48 83 c4 28          	add    $0x28,%rsp
  40188a:	5b                   	pop    %rbx
  40188b:	5d                   	pop    %rbp
  40188c:	c3                   	retq   
  40188d:	90                   	nop

000000000040188e <_ZN11CTFTPServer16CreateACKMessageEP12STFTPMessaget>:

int CTFTPServer::CreateACKMessage(STFTPMessageRef messageref, uint16_t block){
  40188e:	55                   	push   %rbp
  40188f:	48 89 e5             	mov    %rsp,%rbp
  401892:	53                   	push   %rbx
  401893:	48 83 ec 18          	sub    $0x18,%rsp
  401897:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  40189b:	89 f0                	mov    %esi,%eax
  40189d:	66 89 45 e4          	mov    %ax,-0x1c(%rbp)
    messageref->DOpcode = htons(TFTP_OP_ACK);
  4018a1:	bf 04 00 00 00       	mov    $0x4,%edi
  4018a6:	e8 b5 f7 ff ff       	callq  401060 <htons@plt>
  4018ab:	89 c2                	mov    %eax,%edx
  4018ad:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4018b1:	66 89 10             	mov    %dx,(%rax)
    *(uint16_t *)messageref->DPayload = htons(block);
  4018b4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4018b8:	48 8d 58 02          	lea    0x2(%rax),%rbx
  4018bc:	0f b7 45 e4          	movzwl -0x1c(%rbp),%eax
  4018c0:	89 c7                	mov    %eax,%edi
  4018c2:	e8 99 f7 ff ff       	callq  401060 <htons@plt>
  4018c7:	66 89 03             	mov    %ax,(%rbx)
    return 4;
  4018ca:	b8 04 00 00 00       	mov    $0x4,%eax
}
  4018cf:	48 83 c4 18          	add    $0x18,%rsp
  4018d3:	5b                   	pop    %rbx
  4018d4:	5d                   	pop    %rbp
  4018d5:	c3                   	retq   

00000000004018d6 <_ZN11CTFTPServer18CreateErrorMessageEP12STFTPMessagetRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:

int CTFTPServer::CreateErrorMessage(STFTPMessageRef messageref, uint16_t code, const std::string &errormess){
  4018d6:	55                   	push   %rbp
  4018d7:	48 89 e5             	mov    %rsp,%rbp
  4018da:	53                   	push   %rbx
  4018db:	48 83 ec 28          	sub    $0x28,%rsp
  4018df:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  4018e3:	89 f0                	mov    %esi,%eax
  4018e5:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  4018e9:	66 89 45 e4          	mov    %ax,-0x1c(%rbp)
    messageref->DOpcode = htons(TFTP_OP_ERROR);
  4018ed:	bf 05 00 00 00       	mov    $0x5,%edi
  4018f2:	e8 69 f7 ff ff       	callq  401060 <htons@plt>
  4018f7:	89 c2                	mov    %eax,%edx
  4018f9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4018fd:	66 89 10             	mov    %dx,(%rax)
    *(uint16_t *)messageref->DPayload = htons(code);
  401900:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  401904:	48 8d 58 02          	lea    0x2(%rax),%rbx
  401908:	0f b7 45 e4          	movzwl -0x1c(%rbp),%eax
  40190c:	89 c7                	mov    %eax,%edi
  40190e:	e8 4d f7 ff ff       	callq  401060 <htons@plt>
  401913:	66 89 03             	mov    %ax,(%rbx)
    if(errormess.length() >= 1022){
  401916:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40191a:	48 89 c7             	mov    %rax,%rdi
  40191d:	e8 6e f7 ff ff       	callq  401090 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv@plt>
  401922:	48 3d fd 03 00 00    	cmp    $0x3fd,%rax
  401928:	0f 97 c0             	seta   %al
  40192b:	84 c0                	test   %al,%al
  40192d:	74 07                	je     401936 <_ZN11CTFTPServer18CreateErrorMessageEP12STFTPMessagetRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x60>
        return 0;
  40192f:	b8 00 00 00 00       	mov    $0x0,%eax
  401934:	eb 48                	jmp    40197e <_ZN11CTFTPServer18CreateErrorMessageEP12STFTPMessagetRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xa8>
    }
    memcpy(messageref->DPayload + 2, errormess.c_str(), errormess.length() + 1);
  401936:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40193a:	48 89 c7             	mov    %rax,%rdi
  40193d:	e8 4e f7 ff ff       	callq  401090 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv@plt>
  401942:	48 8d 58 01          	lea    0x1(%rax),%rbx
  401946:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40194a:	48 89 c7             	mov    %rax,%rdi
  40194d:	e8 2e f8 ff ff       	callq  401180 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv@plt>
  401952:	48 89 c1             	mov    %rax,%rcx
  401955:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  401959:	48 83 c0 02          	add    $0x2,%rax
  40195d:	48 83 c0 02          	add    $0x2,%rax
  401961:	48 89 da             	mov    %rbx,%rdx
  401964:	48 89 ce             	mov    %rcx,%rsi
  401967:	48 89 c7             	mov    %rax,%rdi
  40196a:	e8 81 f8 ff ff       	callq  4011f0 <memcpy@plt>
    return errormess.length() + 5;
  40196f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  401973:	48 89 c7             	mov    %rax,%rdi
  401976:	e8 15 f7 ff ff       	callq  401090 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv@plt>
  40197b:	83 c0 05             	add    $0x5,%eax
}
  40197e:	48 83 c4 28          	add    $0x28,%rsp
  401982:	5b                   	pop    %rbx
  401983:	5d                   	pop    %rbp
  401984:	c3                   	retq   
  401985:	90                   	nop

0000000000401986 <_ZN11CTFTPServer4OpenEiRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:

bool CTFTPServer::Open(int port, const std::string &rootdir){
  401986:	55                   	push   %rbp
  401987:	48 89 e5             	mov    %rsp,%rbp
  40198a:	48 83 ec 50          	sub    $0x50,%rsp
  40198e:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  401992:	89 75 c4             	mov    %esi,-0x3c(%rbp)
  401995:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
    struct sockaddr_in ServerAddress;
    
    if((1 > port)||(65535 < port)){
  401999:	83 7d c4 00          	cmpl   $0x0,-0x3c(%rbp)
  40199d:	7e 09                	jle    4019a8 <_ZN11CTFTPServer4OpenEiRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x22>
  40199f:	81 7d c4 ff ff 00 00 	cmpl   $0xffff,-0x3c(%rbp)
  4019a6:	7e 0a                	jle    4019b2 <_ZN11CTFTPServer4OpenEiRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x2c>
        return false;   
  4019a8:	b8 00 00 00 00       	mov    $0x0,%eax
  4019ad:	e9 4f 01 00 00       	jmpq   401b01 <_ZN11CTFTPServer4OpenEiRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x17b>
    }
    if('/' == rootdir[rootdir.length() - 1]){
  4019b2:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  4019b6:	48 89 c7             	mov    %rax,%rdi
  4019b9:	e8 d2 f6 ff ff       	callq  401090 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv@plt>
  4019be:	48 8d 50 ff          	lea    -0x1(%rax),%rdx
  4019c2:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  4019c6:	48 89 d6             	mov    %rdx,%rsi
  4019c9:	48 89 c7             	mov    %rax,%rdi
  4019cc:	e8 8f f7 ff ff       	callq  401160 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEm@plt>
  4019d1:	0f b6 00             	movzbl (%rax),%eax
  4019d4:	3c 2f                	cmp    $0x2f,%al
  4019d6:	0f 94 c0             	sete   %al
  4019d9:	84 c0                	test   %al,%al
  4019db:	74 4d                	je     401a2a <_ZN11CTFTPServer4OpenEiRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xa4>
        DRootDirectory = rootdir.substr(0,rootdir.length() - 1);
  4019dd:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  4019e1:	48 89 c7             	mov    %rax,%rdi
  4019e4:	e8 a7 f6 ff ff       	callq  401090 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv@plt>
  4019e9:	48 8d 50 ff          	lea    -0x1(%rax),%rdx
  4019ed:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  4019f1:	48 8b 75 b8          	mov    -0x48(%rbp),%rsi
  4019f5:	48 89 d1             	mov    %rdx,%rcx
  4019f8:	ba 00 00 00 00       	mov    $0x0,%edx
  4019fd:	48 89 c7             	mov    %rax,%rdi
  401a00:	e8 0b f6 ff ff       	callq  401010 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEmm@plt>
  401a05:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  401a09:	48 8d 50 08          	lea    0x8(%rax),%rdx
  401a0d:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  401a11:	48 89 c6             	mov    %rax,%rsi
  401a14:	48 89 d7             	mov    %rdx,%rdi
  401a17:	e8 14 f6 ff ff       	callq  401030 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_@plt>
  401a1c:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  401a20:	48 89 c7             	mov    %rax,%rdi
  401a23:	e8 c8 f6 ff ff       	callq  4010f0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev@plt>
  401a28:	eb 17                	jmp    401a41 <_ZN11CTFTPServer4OpenEiRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xbb>
    }
    else{
        DRootDirectory = rootdir;
  401a2a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  401a2e:	48 8d 50 08          	lea    0x8(%rax),%rdx
  401a32:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  401a36:	48 89 c6             	mov    %rax,%rsi
  401a39:	48 89 d7             	mov    %rdx,%rdi
  401a3c:	e8 2f f7 ff ff       	callq  401170 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_@plt>
    }
    if(0 != chdir(DRootDirectory.c_str())){
  401a41:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  401a45:	48 83 c0 08          	add    $0x8,%rax
  401a49:	48 89 c7             	mov    %rax,%rdi
  401a4c:	e8 2f f7 ff ff       	callq  401180 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv@plt>
  401a51:	48 89 c7             	mov    %rax,%rdi
  401a54:	e8 97 f5 ff ff       	callq  400ff0 <chdir@plt>
  401a59:	85 c0                	test   %eax,%eax
  401a5b:	0f 95 c0             	setne  %al
  401a5e:	84 c0                	test   %al,%al
  401a60:	74 0a                	je     401a6c <_ZN11CTFTPServer4OpenEiRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xe6>
        return false;
  401a62:	b8 00 00 00 00       	mov    $0x0,%eax
  401a67:	e9 95 00 00 00       	jmpq   401b01 <_ZN11CTFTPServer4OpenEiRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x17b>
    }
    DListeningSocket = socket(AF_INET, SOCK_DGRAM, IPPROTO_UDP);
  401a6c:	ba 11 00 00 00       	mov    $0x11,%edx
  401a71:	be 02 00 00 00       	mov    $0x2,%esi
  401a76:	bf 02 00 00 00       	mov    $0x2,%edi
  401a7b:	e8 a0 f6 ff ff       	callq  401120 <socket@plt>
  401a80:	89 c2                	mov    %eax,%edx
  401a82:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  401a86:	89 10                	mov    %edx,(%rax)
    if(0 > DListeningSocket){
  401a88:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  401a8c:	8b 00                	mov    (%rax),%eax
  401a8e:	85 c0                	test   %eax,%eax
  401a90:	79 07                	jns    401a99 <_ZN11CTFTPServer4OpenEiRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x113>
        return false;
  401a92:	b8 00 00 00 00       	mov    $0x0,%eax
  401a97:	eb 68                	jmp    401b01 <_ZN11CTFTPServer4OpenEiRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x17b>
    }
    // Setup ServerAddress data structure
    bzero((char *) &ServerAddress, sizeof(ServerAddress));
  401a99:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  401a9d:	be 10 00 00 00       	mov    $0x10,%esi
  401aa2:	48 89 c7             	mov    %rax,%rdi
  401aa5:	e8 26 f6 ff ff       	callq  4010d0 <bzero@plt>
    ServerAddress.sin_family = AF_INET;
  401aaa:	66 c7 45 d0 02 00    	movw   $0x2,-0x30(%rbp)
    ServerAddress.sin_addr.s_addr = INADDR_ANY;
  401ab0:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%rbp)
    ServerAddress.sin_port = htons(port);
  401ab7:	8b 45 c4             	mov    -0x3c(%rbp),%eax
  401aba:	0f b7 c0             	movzwl %ax,%eax
  401abd:	89 c7                	mov    %eax,%edi
  401abf:	e8 9c f5 ff ff       	callq  401060 <htons@plt>
  401ac4:	66 89 45 d2          	mov    %ax,-0x2e(%rbp)
    // Binding socket to port
    if(0 > bind(DListeningSocket, (struct sockaddr *)&ServerAddress, sizeof(ServerAddress))){ 
  401ac8:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  401acc:	8b 00                	mov    (%rax),%eax
  401ace:	48 8d 4d d0          	lea    -0x30(%rbp),%rcx
  401ad2:	ba 10 00 00 00       	mov    $0x10,%edx
  401ad7:	48 89 ce             	mov    %rcx,%rsi
  401ada:	89 c7                	mov    %eax,%edi
  401adc:	e8 af f6 ff ff       	callq  401190 <bind@plt>
  401ae1:	c1 e8 1f             	shr    $0x1f,%eax
  401ae4:	84 c0                	test   %al,%al
  401ae6:	74 14                	je     401afc <_ZN11CTFTPServer4OpenEiRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x176>
        close(DListeningSocket);
  401ae8:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  401aec:	8b 00                	mov    (%rax),%eax
  401aee:	89 c7                	mov    %eax,%edi
  401af0:	e8 2b f5 ff ff       	callq  401020 <close@plt>
        return false;
  401af5:	b8 00 00 00 00       	mov    $0x0,%eax
  401afa:	eb 05                	jmp    401b01 <_ZN11CTFTPServer4OpenEiRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x17b>
    }
    return true;
  401afc:	b8 01 00 00 00       	mov    $0x1,%eax
}
  401b01:	c9                   	leaveq 
  401b02:	c3                   	retq   
  401b03:	90                   	nop

0000000000401b04 <_ZN11CTFTPServer5CloseEv>:

bool CTFTPServer::Close(){
  401b04:	55                   	push   %rbp
  401b05:	48 89 e5             	mov    %rsp,%rbp
  401b08:	48 83 ec 10          	sub    $0x10,%rsp
  401b0c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    if(-1 != DListeningSocket){
  401b10:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  401b14:	8b 00                	mov    (%rax),%eax
  401b16:	83 f8 ff             	cmp    $0xffffffff,%eax
  401b19:	74 14                	je     401b2f <_ZN11CTFTPServer5CloseEv+0x2b>
        close(DListeningSocket);
  401b1b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  401b1f:	8b 00                	mov    (%rax),%eax
  401b21:	89 c7                	mov    %eax,%edi
  401b23:	e8 f8 f4 ff ff       	callq  401020 <close@plt>
        return true;
  401b28:	b8 01 00 00 00       	mov    $0x1,%eax
  401b2d:	eb 05                	jmp    401b34 <_ZN11CTFTPServer5CloseEv+0x30>
    }
    return false;
  401b2f:	b8 00 00 00 00       	mov    $0x0,%eax
}
  401b34:	c9                   	leaveq 
  401b35:	c3                   	retq   

0000000000401b36 <_ZN11CTFTPServer15ProcessMessagesEv>:

bool CTFTPServer::ProcessMessages(){
  401b36:	55                   	push   %rbp
  401b37:	48 89 e5             	mov    %rsp,%rbp
  401b3a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)

}
  401b3e:	90                   	nop
  401b3f:	5d                   	pop    %rbp
  401b40:	c3                   	retq   

0000000000401b41 <_Z41__static_initialization_and_destruction_0ii>:
  401b41:	55                   	push   %rbp
  401b42:	48 89 e5             	mov    %rsp,%rbp
  401b45:	48 83 ec 10          	sub    $0x10,%rsp
  401b49:	89 7d fc             	mov    %edi,-0x4(%rbp)
  401b4c:	89 75 f8             	mov    %esi,-0x8(%rbp)
  401b4f:	83 7d fc 01          	cmpl   $0x1,-0x4(%rbp)
  401b53:	75 27                	jne    401b7c <_Z41__static_initialization_and_destruction_0ii+0x3b>
  401b55:	81 7d f8 ff ff 00 00 	cmpl   $0xffff,-0x8(%rbp)
  401b5c:	75 1e                	jne    401b7c <_Z41__static_initialization_and_destruction_0ii+0x3b>
        
};

void SignalHandler(int param);

CTFTPServer MainTFTPServer;
  401b5e:	bf 80 31 60 00       	mov    $0x603180,%edi
  401b63:	e8 c6 f9 ff ff       	callq  40152e <_ZN11CTFTPServerC1Ev>
  401b68:	ba a8 1f 40 00       	mov    $0x401fa8,%edx
  401b6d:	be 80 31 60 00       	mov    $0x603180,%esi
  401b72:	bf c8 15 40 00       	mov    $0x4015c8,%edi
  401b77:	e8 34 f5 ff ff       	callq  4010b0 <__cxa_atexit@plt>
    return false;
}

bool CTFTPServer::ProcessMessages(){

}
  401b7c:	90                   	nop
  401b7d:	c9                   	leaveq 
  401b7e:	c3                   	retq   

0000000000401b7f <_GLOBAL__sub_I_MainTFTPServer>:
  401b7f:	55                   	push   %rbp
  401b80:	48 89 e5             	mov    %rsp,%rbp
  401b83:	be ff ff 00 00       	mov    $0xffff,%esi
  401b88:	bf 01 00 00 00       	mov    $0x1,%edi
  401b8d:	e8 af ff ff ff       	callq  401b41 <_Z41__static_initialization_and_destruction_0ii>
  401b92:	5d                   	pop    %rbp
  401b93:	c3                   	retq   

0000000000401b94 <_ZNSt7__cxx114listI17STransferProgressSaIS1_EED1Ev>:
   *  we start at the tail and move forward by one.  When this member
   *  iterator's next/previous pointers refer to itself, the %list is
   *  %empty. 
  */
  template<typename _Tp, typename _Alloc = std::allocator<_Tp> >
    class list : protected _List_base<_Tp, _Alloc>
  401b94:	55                   	push   %rbp
  401b95:	48 89 e5             	mov    %rsp,%rbp
  401b98:	48 83 ec 10          	sub    $0x10,%rsp
  401b9c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  401ba0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  401ba4:	48 89 c7             	mov    %rax,%rdi
  401ba7:	e8 3c 00 00 00       	callq  401be8 <_ZNSt7__cxx1110_List_baseI17STransferProgressSaIS1_EED1Ev>
  401bac:	90                   	nop
  401bad:	c9                   	leaveq 
  401bae:	c3                   	retq   
  401baf:	90                   	nop

0000000000401bb0 <_ZNSt7__cxx114listI17STransferProgressSaIS1_EEC1Ev>:
      // (assign() and get_allocator() are also listed in this section)

      /**
       *  @brief  Creates a %list with no elements.
       */
      list()
  401bb0:	55                   	push   %rbp
  401bb1:	48 89 e5             	mov    %rsp,%rbp
  401bb4:	48 83 ec 10          	sub    $0x10,%rsp
  401bb8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
#if __cplusplus >= 201103L
      noexcept(is_nothrow_default_constructible<_Node_alloc_type>::value)
#endif
      : _Base() { }
  401bbc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  401bc0:	48 89 c7             	mov    %rax,%rdi
  401bc3:	e8 48 00 00 00       	callq  401c10 <_ZNSt7__cxx1110_List_baseI17STransferProgressSaIS1_EEC1Ev>
  401bc8:	90                   	nop
  401bc9:	c9                   	leaveq 
  401bca:	c3                   	retq   
  401bcb:	90                   	nop

0000000000401bcc <_ZNSt7__cxx1110_List_baseI17STransferProgressSaIS1_EE10_List_implD1Ev>:
	    ++__n;
	  }
	return __n;
      }

      struct _List_impl
  401bcc:	55                   	push   %rbp
  401bcd:	48 89 e5             	mov    %rsp,%rbp
  401bd0:	48 83 ec 10          	sub    $0x10,%rsp
  401bd4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  401bd8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  401bdc:	48 89 c7             	mov    %rax,%rdi
  401bdf:	e8 54 00 00 00       	callq  401c38 <_ZNSaISt10_List_nodeI17STransferProgressEED1Ev>
  401be4:	90                   	nop
  401be5:	c9                   	leaveq 
  401be6:	c3                   	retq   
  401be7:	90                   	nop

0000000000401be8 <_ZNSt7__cxx1110_List_baseI17STransferProgressSaIS1_EED1Ev>:
	  }
      }
#endif

      // This is what actually destroys the list.
      ~_List_base() _GLIBCXX_NOEXCEPT
  401be8:	55                   	push   %rbp
  401be9:	48 89 e5             	mov    %rsp,%rbp
  401bec:	48 83 ec 10          	sub    $0x10,%rsp
  401bf0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { _M_clear(); }
  401bf4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  401bf8:	48 89 c7             	mov    %rax,%rdi
  401bfb:	e8 54 00 00 00       	callq  401c54 <_ZNSt7__cxx1110_List_baseI17STransferProgressSaIS1_EE8_M_clearEv>
  401c00:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  401c04:	48 89 c7             	mov    %rax,%rdi
  401c07:	e8 c0 ff ff ff       	callq  401bcc <_ZNSt7__cxx1110_List_baseI17STransferProgressSaIS1_EE10_List_implD1Ev>
  401c0c:	90                   	nop
  401c0d:	c9                   	leaveq 
  401c0e:	c3                   	retq   
  401c0f:	90                   	nop

0000000000401c10 <_ZNSt7__cxx1110_List_baseI17STransferProgressSaIS1_EEC1Ev>:

      const _Node_alloc_type&
      _M_get_Node_allocator() const _GLIBCXX_NOEXCEPT
      { return _M_impl; }

      _List_base()
  401c10:	55                   	push   %rbp
  401c11:	48 89 e5             	mov    %rsp,%rbp
  401c14:	48 83 ec 10          	sub    $0x10,%rsp
  401c18:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      : _M_impl()
  401c1c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  401c20:	48 89 c7             	mov    %rax,%rdi
  401c23:	e8 a6 00 00 00       	callq  401cce <_ZNSt7__cxx1110_List_baseI17STransferProgressSaIS1_EE10_List_implC1Ev>
      { _M_init(); }
  401c28:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  401c2c:	48 89 c7             	mov    %rax,%rdi
  401c2f:	e8 d0 00 00 00       	callq  401d04 <_ZNSt7__cxx1110_List_baseI17STransferProgressSaIS1_EE7_M_initEv>
  401c34:	90                   	nop
  401c35:	c9                   	leaveq 
  401c36:	c3                   	retq   
  401c37:	90                   	nop

0000000000401c38 <_ZNSaISt10_List_nodeI17STransferProgressEED1Ev>:
      : __allocator_base<_Tp>(__a) { }

      template<typename _Tp1>
        allocator(const allocator<_Tp1>&) throw() { }

      ~allocator() throw() { }
  401c38:	55                   	push   %rbp
  401c39:	48 89 e5             	mov    %rsp,%rbp
  401c3c:	48 83 ec 10          	sub    $0x10,%rsp
  401c40:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  401c44:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  401c48:	48 89 c7             	mov    %rax,%rdi
  401c4b:	e8 ec 00 00 00       	callq  401d3c <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeI17STransferProgressEED1Ev>
  401c50:	90                   	nop
  401c51:	c9                   	leaveq 
  401c52:	c3                   	retq   
  401c53:	90                   	nop

0000000000401c54 <_ZNSt7__cxx1110_List_baseI17STransferProgressSaIS1_EE8_M_clearEv>:
{
_GLIBCXX_BEGIN_NAMESPACE_CONTAINER

  template<typename _Tp, typename _Alloc>
    void
    _List_base<_Tp, _Alloc>::
  401c54:	55                   	push   %rbp
  401c55:	48 89 e5             	mov    %rsp,%rbp
  401c58:	48 83 ec 30          	sub    $0x30,%rsp
  401c5c:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
    _M_clear() _GLIBCXX_NOEXCEPT
    {
      typedef _List_node<_Tp>  _Node;
      __detail::_List_node_base* __cur = _M_impl._M_node._M_next;
  401c60:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  401c64:	48 8b 00             	mov    (%rax),%rax
  401c67:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
      while (__cur != &_M_impl._M_node)
  401c6b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  401c6f:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  401c73:	74 56                	je     401ccb <_ZNSt7__cxx1110_List_baseI17STransferProgressSaIS1_EE8_M_clearEv+0x77>
	{
	  _Node* __tmp = static_cast<_Node*>(__cur);
  401c75:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  401c79:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	  __cur = __tmp->_M_next;
  401c7d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  401c81:	48 8b 00             	mov    (%rax),%rax
  401c84:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	  _Tp* __val = __tmp->_M_valptr();
  401c88:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  401c8c:	48 89 c7             	mov    %rax,%rdi
  401c8f:	e8 b4 00 00 00       	callq  401d48 <_ZNSt10_List_nodeI17STransferProgressE9_M_valptrEv>
  401c94:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
#if __cplusplus >= 201103L
	  _Node_alloc_traits::destroy(_M_get_Node_allocator(), __val);
  401c98:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  401c9c:	48 89 c7             	mov    %rax,%rdi
  401c9f:	e8 c2 00 00 00       	callq  401d66 <_ZNSt7__cxx1110_List_baseI17STransferProgressSaIS1_EE21_M_get_Node_allocatorEv>
  401ca4:	48 89 c2             	mov    %rax,%rdx
  401ca7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  401cab:	48 89 c6             	mov    %rax,%rsi
  401cae:	48 89 d7             	mov    %rdx,%rdi
  401cb1:	e8 be 00 00 00       	callq  401d74 <_ZNSt16allocator_traitsISaISt10_List_nodeI17STransferProgressEEE7destroyIS1_EEvRS3_PT_>
#else
	  _Tp_alloc_type(_M_get_Node_allocator()).destroy(__val);
#endif
	  _M_put_node(__tmp);
  401cb6:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  401cba:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  401cbe:	48 89 d6             	mov    %rdx,%rsi
  401cc1:	48 89 c7             	mov    %rax,%rdi
  401cc4:	e8 d1 00 00 00       	callq  401d9a <_ZNSt7__cxx1110_List_baseI17STransferProgressSaIS1_EE11_M_put_nodeEPSt10_List_nodeIS1_E>
    _List_base<_Tp, _Alloc>::
    _M_clear() _GLIBCXX_NOEXCEPT
    {
      typedef _List_node<_Tp>  _Node;
      __detail::_List_node_base* __cur = _M_impl._M_node._M_next;
      while (__cur != &_M_impl._M_node)
  401cc9:	eb a0                	jmp    401c6b <_ZNSt7__cxx1110_List_baseI17STransferProgressSaIS1_EE8_M_clearEv+0x17>
#else
	  _Tp_alloc_type(_M_get_Node_allocator()).destroy(__val);
#endif
	  _M_put_node(__tmp);
	}
    }
  401ccb:	90                   	nop
  401ccc:	c9                   	leaveq 
  401ccd:	c3                   	retq   

0000000000401cce <_ZNSt7__cxx1110_List_baseI17STransferProgressSaIS1_EE10_List_implC1Ev>:
	_List_node<size_t> _M_node;
#else
	__detail::_List_node_base _M_node;
#endif

	_List_impl() _GLIBCXX_NOEXCEPT
  401cce:	55                   	push   %rbp
  401ccf:	48 89 e5             	mov    %rsp,%rbp
  401cd2:	48 83 ec 10          	sub    $0x10,%rsp
  401cd6:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	: _Node_alloc_type(), _M_node()
  401cda:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  401cde:	48 89 c7             	mov    %rax,%rdi
  401ce1:	e8 e0 00 00 00       	callq  401dc6 <_ZNSaISt10_List_nodeI17STransferProgressEEC1Ev>
  401ce6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  401cea:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  401cf1:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
  401cf8:	00 
  401cf9:	48 c7 40 10 00 00 00 	movq   $0x0,0x10(%rax)
  401d00:	00 
	{ }
  401d01:	90                   	nop
  401d02:	c9                   	leaveq 
  401d03:	c3                   	retq   

0000000000401d04 <_ZNSt7__cxx1110_List_baseI17STransferProgressSaIS1_EE7_M_initEv>:

      void
      _M_clear() _GLIBCXX_NOEXCEPT;

      void
      _M_init() _GLIBCXX_NOEXCEPT
  401d04:	55                   	push   %rbp
  401d05:	48 89 e5             	mov    %rsp,%rbp
  401d08:	48 83 ec 10          	sub    $0x10,%rsp
  401d0c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      {
        this->_M_impl._M_node._M_next = &this->_M_impl._M_node;
  401d10:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  401d14:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  401d18:	48 89 10             	mov    %rdx,(%rax)
        this->_M_impl._M_node._M_prev = &this->_M_impl._M_node;
  401d1b:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  401d1f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  401d23:	48 89 50 08          	mov    %rdx,0x8(%rax)
	_M_set_size(0);
  401d27:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  401d2b:	be 00 00 00 00       	mov    $0x0,%esi
  401d30:	48 89 c7             	mov    %rax,%rdi
  401d33:	e8 aa 00 00 00       	callq  401de2 <_ZNSt7__cxx1110_List_baseI17STransferProgressSaIS1_EE11_M_set_sizeEm>
      }
  401d38:	90                   	nop
  401d39:	c9                   	leaveq 
  401d3a:	c3                   	retq   
  401d3b:	90                   	nop

0000000000401d3c <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeI17STransferProgressEED1Ev>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }

      template<typename _Tp1>
        new_allocator(const new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }

      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
  401d3c:	55                   	push   %rbp
  401d3d:	48 89 e5             	mov    %rsp,%rbp
  401d40:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  401d44:	90                   	nop
  401d45:	5d                   	pop    %rbp
  401d46:	c3                   	retq   
  401d47:	90                   	nop

0000000000401d48 <_ZNSt10_List_nodeI17STransferProgressE9_M_valptrEv>:
  template<typename _Tp>
    struct _List_node : public __detail::_List_node_base
    {
#if __cplusplus >= 201103L
      __gnu_cxx::__aligned_membuf<_Tp> _M_storage;
      _Tp*       _M_valptr()       { return _M_storage._M_ptr(); }
  401d48:	55                   	push   %rbp
  401d49:	48 89 e5             	mov    %rsp,%rbp
  401d4c:	48 83 ec 10          	sub    $0x10,%rsp
  401d50:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  401d54:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  401d58:	48 83 c0 10          	add    $0x10,%rax
  401d5c:	48 89 c7             	mov    %rax,%rdi
  401d5f:	e8 a8 00 00 00       	callq  401e0c <_ZN9__gnu_cxx16__aligned_membufI17STransferProgressE6_M_ptrEv>
  401d64:	c9                   	leaveq 
  401d65:	c3                   	retq   

0000000000401d66 <_ZNSt7__cxx1110_List_baseI17STransferProgressSaIS1_EE21_M_get_Node_allocatorEv>:

  public:
      typedef _Alloc allocator_type;

      _Node_alloc_type&
      _M_get_Node_allocator() _GLIBCXX_NOEXCEPT
  401d66:	55                   	push   %rbp
  401d67:	48 89 e5             	mov    %rsp,%rbp
  401d6a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_impl; }
  401d6e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  401d72:	5d                   	pop    %rbp
  401d73:	c3                   	retq   

0000000000401d74 <_ZNSt16allocator_traitsISaISt10_List_nodeI17STransferProgressEEE7destroyIS1_EEvRS3_PT_>:
       *
       *  Calls @c __a.destroy(__p).
      */
      template<typename _Up>
	static void
	destroy(allocator_type& __a, _Up* __p)
  401d74:	55                   	push   %rbp
  401d75:	48 89 e5             	mov    %rsp,%rbp
  401d78:	48 83 ec 10          	sub    $0x10,%rsp
  401d7c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  401d80:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	{ __a.destroy(__p); }
  401d84:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  401d88:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  401d8c:	48 89 d6             	mov    %rdx,%rsi
  401d8f:	48 89 c7             	mov    %rax,%rdi
  401d92:	e8 af 00 00 00       	callq  401e46 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeI17STransferProgressEE7destroyIS2_EEvPT_>
  401d97:	90                   	nop
  401d98:	c9                   	leaveq 
  401d99:	c3                   	retq   

0000000000401d9a <_ZNSt7__cxx1110_List_baseI17STransferProgressSaIS1_EE11_M_put_nodeEPSt10_List_nodeIS1_E>:
      typename _Node_alloc_traits::pointer
      _M_get_node()
      { return _Node_alloc_traits::allocate(_M_impl, 1); }

      void
      _M_put_node(typename _Node_alloc_traits::pointer __p) _GLIBCXX_NOEXCEPT
  401d9a:	55                   	push   %rbp
  401d9b:	48 89 e5             	mov    %rsp,%rbp
  401d9e:	48 83 ec 10          	sub    $0x10,%rsp
  401da2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  401da6:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      { _Node_alloc_traits::deallocate(_M_impl, __p, 1); }
  401daa:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  401dae:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
  401db2:	ba 01 00 00 00       	mov    $0x1,%edx
  401db7:	48 89 ce             	mov    %rcx,%rsi
  401dba:	48 89 c7             	mov    %rax,%rdi
  401dbd:	e8 a3 00 00 00       	callq  401e65 <_ZNSt16allocator_traitsISaISt10_List_nodeI17STransferProgressEEE10deallocateERS3_PS2_m>
  401dc2:	90                   	nop
  401dc3:	c9                   	leaveq 
  401dc4:	c3                   	retq   
  401dc5:	90                   	nop

0000000000401dc6 <_ZNSaISt10_List_nodeI17STransferProgressEEC1Ev>:
      typedef true_type propagate_on_container_move_assignment;

      typedef true_type is_always_equal;
#endif

      allocator() throw() { }
  401dc6:	55                   	push   %rbp
  401dc7:	48 89 e5             	mov    %rsp,%rbp
  401dca:	48 83 ec 10          	sub    $0x10,%rsp
  401dce:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  401dd2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  401dd6:	48 89 c7             	mov    %rax,%rdi
  401dd9:	e8 b6 00 00 00       	callq  401e94 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeI17STransferProgressEEC1Ev>
  401dde:	90                   	nop
  401ddf:	c9                   	leaveq 
  401de0:	c3                   	retq   
  401de1:	90                   	nop

0000000000401de2 <_ZNSt7__cxx1110_List_baseI17STransferProgressSaIS1_EE11_M_set_sizeEm>:
      _List_impl _M_impl;

#if _GLIBCXX_USE_CXX11_ABI
      size_t _M_get_size() const { return *_M_impl._M_node._M_valptr(); }

      void _M_set_size(size_t __n) { *_M_impl._M_node._M_valptr() = __n; }
  401de2:	55                   	push   %rbp
  401de3:	48 89 e5             	mov    %rsp,%rbp
  401de6:	48 83 ec 10          	sub    $0x10,%rsp
  401dea:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  401dee:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  401df2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  401df6:	48 89 c7             	mov    %rax,%rdi
  401df9:	e8 a2 00 00 00       	callq  401ea0 <_ZNSt10_List_nodeImE9_M_valptrEv>
  401dfe:	48 89 c2             	mov    %rax,%rdx
  401e01:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  401e05:	48 89 02             	mov    %rax,(%rdx)
  401e08:	90                   	nop
  401e09:	c9                   	leaveq 
  401e0a:	c3                   	retq   
  401e0b:	90                   	nop

0000000000401e0c <_ZN9__gnu_cxx16__aligned_membufI17STransferProgressE6_M_ptrEv>:
      const void*
      _M_addr() const noexcept
      { return static_cast<const void*>(&_M_storage); }

      _Tp*
      _M_ptr() noexcept
  401e0c:	55                   	push   %rbp
  401e0d:	48 89 e5             	mov    %rsp,%rbp
  401e10:	48 83 ec 10          	sub    $0x10,%rsp
  401e14:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return static_cast<_Tp*>(_M_addr()); }
  401e18:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  401e1c:	48 89 c7             	mov    %rax,%rdi
  401e1f:	e8 9a 00 00 00       	callq  401ebe <_ZN9__gnu_cxx16__aligned_membufI17STransferProgressE7_M_addrEv>
  401e24:	c9                   	leaveq 
  401e25:	c3                   	retq   

0000000000401e26 <_ZN17STransferProgressD1Ev>:
    int DConsecutiveTimeouts;
    int DBytesInBlock;
    uint16_t DBlock;
    uint8_t DData[512];
    
} STransferProgress, *STransferProgressRef;
  401e26:	55                   	push   %rbp
  401e27:	48 89 e5             	mov    %rsp,%rbp
  401e2a:	48 83 ec 10          	sub    $0x10,%rsp
  401e2e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  401e32:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  401e36:	48 83 c0 08          	add    $0x8,%rax
  401e3a:	48 89 c7             	mov    %rax,%rdi
  401e3d:	e8 ae f2 ff ff       	callq  4010f0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev@plt>
  401e42:	90                   	nop
  401e43:	c9                   	leaveq 
  401e44:	c3                   	retq   
  401e45:	90                   	nop

0000000000401e46 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeI17STransferProgressEE7destroyIS2_EEvPT_>:
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }

      template<typename _Up>
        void 
        destroy(_Up* __p) { __p->~_Up(); }
  401e46:	55                   	push   %rbp
  401e47:	48 89 e5             	mov    %rsp,%rbp
  401e4a:	48 83 ec 10          	sub    $0x10,%rsp
  401e4e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  401e52:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  401e56:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  401e5a:	48 89 c7             	mov    %rax,%rdi
  401e5d:	e8 c4 ff ff ff       	callq  401e26 <_ZN17STransferProgressD1Ev>
  401e62:	90                   	nop
  401e63:	c9                   	leaveq 
  401e64:	c3                   	retq   

0000000000401e65 <_ZNSt16allocator_traitsISaISt10_List_nodeI17STransferProgressEEE10deallocateERS3_PS2_m>:
       *  @param  __n  The number of objects space was allocated for.
       *
       *  Calls <tt> a.deallocate(p, n) </tt>
      */
      static void
      deallocate(allocator_type& __a, pointer __p, size_type __n)
  401e65:	55                   	push   %rbp
  401e66:	48 89 e5             	mov    %rsp,%rbp
  401e69:	48 83 ec 20          	sub    $0x20,%rsp
  401e6d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  401e71:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  401e75:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      { __a.deallocate(__p, __n); }
  401e79:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  401e7d:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
  401e81:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  401e85:	48 89 ce             	mov    %rcx,%rsi
  401e88:	48 89 c7             	mov    %rax,%rdi
  401e8b:	e8 3c 00 00 00       	callq  401ecc <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeI17STransferProgressEE10deallocateEPS3_m>
  401e90:	90                   	nop
  401e91:	c9                   	leaveq 
  401e92:	c3                   	retq   
  401e93:	90                   	nop

0000000000401e94 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeI17STransferProgressEEC1Ev>:
      // _GLIBCXX_RESOLVE_LIB_DEFECTS
      // 2103. propagate_on_container_move_assignment
      typedef std::true_type propagate_on_container_move_assignment;
#endif

      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
  401e94:	55                   	push   %rbp
  401e95:	48 89 e5             	mov    %rsp,%rbp
  401e98:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  401e9c:	90                   	nop
  401e9d:	5d                   	pop    %rbp
  401e9e:	c3                   	retq   
  401e9f:	90                   	nop

0000000000401ea0 <_ZNSt10_List_nodeImE9_M_valptrEv>:
  template<typename _Tp>
    struct _List_node : public __detail::_List_node_base
    {
#if __cplusplus >= 201103L
      __gnu_cxx::__aligned_membuf<_Tp> _M_storage;
      _Tp*       _M_valptr()       { return _M_storage._M_ptr(); }
  401ea0:	55                   	push   %rbp
  401ea1:	48 89 e5             	mov    %rsp,%rbp
  401ea4:	48 83 ec 10          	sub    $0x10,%rsp
  401ea8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  401eac:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  401eb0:	48 83 c0 10          	add    $0x10,%rax
  401eb4:	48 89 c7             	mov    %rax,%rdi
  401eb7:	e8 34 00 00 00       	callq  401ef0 <_ZN9__gnu_cxx16__aligned_membufImE6_M_ptrEv>
  401ebc:	c9                   	leaveq 
  401ebd:	c3                   	retq   

0000000000401ebe <_ZN9__gnu_cxx16__aligned_membufI17STransferProgressE7_M_addrEv>:

      // Can be used to avoid value-initialization zeroing _M_storage.
      __aligned_membuf(std::nullptr_t) { }

      void*
      _M_addr() noexcept
  401ebe:	55                   	push   %rbp
  401ebf:	48 89 e5             	mov    %rsp,%rbp
  401ec2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return static_cast<void*>(&_M_storage); }
  401ec6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  401eca:	5d                   	pop    %rbp
  401ecb:	c3                   	retq   

0000000000401ecc <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeI17STransferProgressEE10deallocateEPS3_m>:
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
  401ecc:	55                   	push   %rbp
  401ecd:	48 89 e5             	mov    %rsp,%rbp
  401ed0:	48 83 ec 20          	sub    $0x20,%rsp
  401ed4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  401ed8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  401edc:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      { ::operator delete(__p); }
  401ee0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  401ee4:	48 89 c7             	mov    %rax,%rdi
  401ee7:	e8 64 f1 ff ff       	callq  401050 <_ZdlPv@plt>
  401eec:	90                   	nop
  401eed:	c9                   	leaveq 
  401eee:	c3                   	retq   
  401eef:	90                   	nop

0000000000401ef0 <_ZN9__gnu_cxx16__aligned_membufImE6_M_ptrEv>:
      const void*
      _M_addr() const noexcept
      { return static_cast<const void*>(&_M_storage); }

      _Tp*
      _M_ptr() noexcept
  401ef0:	55                   	push   %rbp
  401ef1:	48 89 e5             	mov    %rsp,%rbp
  401ef4:	48 83 ec 10          	sub    $0x10,%rsp
  401ef8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return static_cast<_Tp*>(_M_addr()); }
  401efc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  401f00:	48 89 c7             	mov    %rax,%rdi
  401f03:	e8 02 00 00 00       	callq  401f0a <_ZN9__gnu_cxx16__aligned_membufImE7_M_addrEv>
  401f08:	c9                   	leaveq 
  401f09:	c3                   	retq   

0000000000401f0a <_ZN9__gnu_cxx16__aligned_membufImE7_M_addrEv>:

      // Can be used to avoid value-initialization zeroing _M_storage.
      __aligned_membuf(std::nullptr_t) { }

      void*
      _M_addr() noexcept
  401f0a:	55                   	push   %rbp
  401f0b:	48 89 e5             	mov    %rsp,%rbp
  401f0e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return static_cast<void*>(&_M_storage); }
  401f12:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  401f16:	5d                   	pop    %rbp
  401f17:	c3                   	retq   
  401f18:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  401f1f:	00 

0000000000401f20 <__libc_csu_init>:
  401f20:	41 57                	push   %r15
  401f22:	41 56                	push   %r14
  401f24:	41 89 ff             	mov    %edi,%r15d
  401f27:	41 55                	push   %r13
  401f29:	41 54                	push   %r12
  401f2b:	4c 8d 25 a6 0e 20 00 	lea    0x200ea6(%rip),%r12        # 602dd8 <__frame_dummy_init_array_entry>
  401f32:	55                   	push   %rbp
  401f33:	48 8d 2d ae 0e 20 00 	lea    0x200eae(%rip),%rbp        # 602de8 <__init_array_end>
  401f3a:	53                   	push   %rbx
  401f3b:	49 89 f6             	mov    %rsi,%r14
  401f3e:	49 89 d5             	mov    %rdx,%r13
  401f41:	4c 29 e5             	sub    %r12,%rbp
  401f44:	48 83 ec 08          	sub    $0x8,%rsp
  401f48:	48 c1 fd 03          	sar    $0x3,%rbp
  401f4c:	e8 67 f0 ff ff       	callq  400fb8 <_init>
  401f51:	48 85 ed             	test   %rbp,%rbp
  401f54:	74 20                	je     401f76 <__libc_csu_init+0x56>
  401f56:	31 db                	xor    %ebx,%ebx
  401f58:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  401f5f:	00 
  401f60:	4c 89 ea             	mov    %r13,%rdx
  401f63:	4c 89 f6             	mov    %r14,%rsi
  401f66:	44 89 ff             	mov    %r15d,%edi
  401f69:	41 ff 14 dc          	callq  *(%r12,%rbx,8)
  401f6d:	48 83 c3 01          	add    $0x1,%rbx
  401f71:	48 39 dd             	cmp    %rbx,%rbp
  401f74:	75 ea                	jne    401f60 <__libc_csu_init+0x40>
  401f76:	48 83 c4 08          	add    $0x8,%rsp
  401f7a:	5b                   	pop    %rbx
  401f7b:	5d                   	pop    %rbp
  401f7c:	41 5c                	pop    %r12
  401f7e:	41 5d                	pop    %r13
  401f80:	41 5e                	pop    %r14
  401f82:	41 5f                	pop    %r15
  401f84:	c3                   	retq   
  401f85:	90                   	nop
  401f86:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  401f8d:	00 00 00 

0000000000401f90 <__libc_csu_fini>:
  401f90:	f3 c3                	repz retq 

Disassembly of section .fini:

0000000000401f94 <_fini>:
  401f94:	48 83 ec 08          	sub    $0x8,%rsp
  401f98:	48 83 c4 08          	add    $0x8,%rsp
  401f9c:	c3                   	retq   
